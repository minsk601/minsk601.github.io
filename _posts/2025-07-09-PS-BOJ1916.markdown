---
layout: post
title:  "[C++] 백준 1916번: 최소비용 구하기"
date:   2025-07-09 00:00:00 +0900
categories: PS
tags: [Dijkstra, Shortest Path]
---

# 문제

[문제: https://acmicpc.net/problem/1916](https://boj.kr/1916)   
**난이도: 골드 V**

# 풀이 방법  

가장 기본적인 다익스트라(Dijkstra) 문제. 종만북의 다익스트라 코드를 참고하여 풀었다.   
다익스트라 알고리즘은 큐 대신 우선순위 큐를 사용하여 문제를 해결한다.   

우선순위 큐는 내부적으로 내림차순 정렬이 되어 값이 제거된다.   
버스로 이동하는 비용을 우선순위 큐에 넣기 때문에, - 로 부호를 변경하여 큐에 삽입한다.   


# 소스 코드

```cpp
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define INF 99999999

vector<int> dijkstra(int start, int v, vector<pair<int, int>> graph[])
{
	vector<int> dist(v, INF); // 거리 저장 벡터
	priority_queue<pair<int, int>> pq;

	dist[start] = 0;
	pq.push({0, start});

	while(!pq.empty())
	{
		int cur_dist = -pq.top().first;
		int cur_node = pq.top().second;
		pq.pop();

		if(dist[cur_node] < cur_dist) continue;

		for(int i = 0; i < graph[cur_node].size(); i++)
		{

			int nxt_node = graph[cur_node][i].first;
			int nxt_dist = cur_dist + graph[cur_node][i].second;

			if(nxt_dist < dist[nxt_node])
			{
				dist[nxt_node] = nxt_dist;
				pq.push({ -nxt_dist, nxt_node });
			}
		}
	}
	return dist;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	int n, m;
	cin >> n >> m;
	vector<pair<int, int>> graph[n + 1];
	for(int i = 0; i < m; i++) {
		int f, t, c;
		cin >> f >> t >> c;
		graph[f].push_back({t, c});
	}
	int f, t;
	cin >> f >> t;
	vector<int> dist = dijkstra(f, n + 1, graph);
	cout << dist[t];

	return 0;
}
```