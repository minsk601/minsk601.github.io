---
layout: post
title:  "[C++] 백준 2042번: 구간 합 구하기"
date:   2025-07-23 10:00:00 +0900
categories: PS
tags: [Segment Tree]
---

# 문제

[문제: https://acmicpc.net/problem/2042](https://boj.kr/2042)   
**난이도: 골드 I**


# 풀이 방법  
   
기본적인 세그먼트 트리 문제이다.   
**>** 입력받는 수들을 arr 배열에 저장[index: 0 ~ (n - 1)]   
**>** build 함수를 통해 세그먼트 트리 생성 [index: 1 ~ ]   
**>** arr와 tree배열의 index값이 다르므로 주의하며 풀이   
**>** int 타입으로 배열을 선언 할 경우, 값을 초과할 수 있으니 long long 으로 선언   

# 소스 코드

```cpp
#include <iostream>
#include <algorithm>

using namespace std;

long long arr[1000001];
long long tree[4000004];

long long build(int node, int start, int end) {
    if(start == end) return tree[node] = arr[start]; // 리프 노드
    int mid = (start + end) / 2;
    return tree[node] = build(node * 2, start, mid) + build(node * 2 + 1, mid + 1, end);
}

void update(int node, int start, int end, int idx, long long diff) {
    if(idx < start || idx > end) return; // 범위 밖
    tree[node] += diff;
    if(start != end) {
        int mid = (start + end) / 2;
        update(node * 2, start, mid, idx, diff);
        update(node * 2 + 1, mid + 1, end, idx, diff);
    }
}

long long query(int node, int start, int end, int left, int right) {
    if(right < start || end < left) return 0;
    if(left <= start && end <= right) return tree[node];
    
    int mid = (start + end) / 2;
    return query(node * 2, start, mid, left, right) + query(node * 2 + 1, mid + 1, end, left, right);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m, k;
    cin >> n >> m >> k;
    for(int i = 0; i < n; i++) cin >> arr[i];
    build(1, 0, n - 1);

    for(int i = 0; i < (m + k); i++) {
        int a, b;
        long long c;
        cin >> a >> b >> c;
        if(a == 1) {
            update(1, 0, n - 1, b - 1, c - arr[b - 1]);
            arr[b - 1] = c;
        } else {
            cout << query(1, 0, n - 1, b - 1, c - 1) << "\n";
        }
    }
    return 0;
}
```